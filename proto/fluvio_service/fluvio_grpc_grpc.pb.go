// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/fluvio_grpc.proto

package fluvio_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FluvioService_Produce_FullMethodName               = "/fluvio_grpc.FluvioService/Produce"
	FluvioService_BatchProduce_FullMethodName          = "/fluvio_grpc.FluvioService/BatchProduce"
	FluvioService_Consume_FullMethodName               = "/fluvio_grpc.FluvioService/Consume"
	FluvioService_StreamConsume_FullMethodName         = "/fluvio_grpc.FluvioService/StreamConsume"
	FluvioService_CommitOffset_FullMethodName          = "/fluvio_grpc.FluvioService/CommitOffset"
	FluvioService_CreateTopic_FullMethodName           = "/fluvio_grpc.FluvioService/CreateTopic"
	FluvioService_DeleteTopic_FullMethodName           = "/fluvio_grpc.FluvioService/DeleteTopic"
	FluvioService_ListTopics_FullMethodName            = "/fluvio_grpc.FluvioService/ListTopics"
	FluvioService_DescribeTopic_FullMethodName         = "/fluvio_grpc.FluvioService/DescribeTopic"
	FluvioService_ListConsumerGroups_FullMethodName    = "/fluvio_grpc.FluvioService/ListConsumerGroups"
	FluvioService_DescribeConsumerGroup_FullMethodName = "/fluvio_grpc.FluvioService/DescribeConsumerGroup"
	FluvioService_CreateSmartModule_FullMethodName     = "/fluvio_grpc.FluvioService/CreateSmartModule"
	FluvioService_DeleteSmartModule_FullMethodName     = "/fluvio_grpc.FluvioService/DeleteSmartModule"
	FluvioService_ListSmartModules_FullMethodName      = "/fluvio_grpc.FluvioService/ListSmartModules"
	FluvioService_DescribeSmartModule_FullMethodName   = "/fluvio_grpc.FluvioService/DescribeSmartModule"
	FluvioService_UpdateSmartModule_FullMethodName     = "/fluvio_grpc.FluvioService/UpdateSmartModule"
	FluvioService_HealthCheck_FullMethodName           = "/fluvio_grpc.FluvioService/HealthCheck"
)

// FluvioServiceClient is the client API for FluvioService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// FluvioService 定义了模拟 Fluvio 的核心服务接口
type FluvioServiceClient interface {
	// 消息生产/消费相关
	Produce(ctx context.Context, in *ProduceRequest, opts ...grpc.CallOption) (*ProduceReply, error)
	BatchProduce(ctx context.Context, in *BatchProduceRequest, opts ...grpc.CallOption) (*BatchProduceReply, error)
	Consume(ctx context.Context, in *ConsumeRequest, opts ...grpc.CallOption) (*ConsumeReply, error)
	StreamConsume(ctx context.Context, in *StreamConsumeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ConsumedMessage], error)
	CommitOffset(ctx context.Context, in *CommitOffsetRequest, opts ...grpc.CallOption) (*CommitOffsetReply, error)
	// 主题管理相关
	CreateTopic(ctx context.Context, in *CreateTopicRequest, opts ...grpc.CallOption) (*CreateTopicReply, error)
	DeleteTopic(ctx context.Context, in *DeleteTopicRequest, opts ...grpc.CallOption) (*DeleteTopicReply, error)
	ListTopics(ctx context.Context, in *ListTopicsRequest, opts ...grpc.CallOption) (*ListTopicsReply, error)
	DescribeTopic(ctx context.Context, in *DescribeTopicRequest, opts ...grpc.CallOption) (*DescribeTopicReply, error)
	// 消费者组管理相关
	ListConsumerGroups(ctx context.Context, in *ListConsumerGroupsRequest, opts ...grpc.CallOption) (*ListConsumerGroupsReply, error)
	DescribeConsumerGroup(ctx context.Context, in *DescribeConsumerGroupRequest, opts ...grpc.CallOption) (*DescribeConsumerGroupReply, error)
	// SmartModule 管理相关
	CreateSmartModule(ctx context.Context, in *CreateSmartModuleRequest, opts ...grpc.CallOption) (*CreateSmartModuleReply, error)
	DeleteSmartModule(ctx context.Context, in *DeleteSmartModuleRequest, opts ...grpc.CallOption) (*DeleteSmartModuleReply, error)
	ListSmartModules(ctx context.Context, in *ListSmartModulesRequest, opts ...grpc.CallOption) (*ListSmartModulesReply, error)
	DescribeSmartModule(ctx context.Context, in *DescribeSmartModuleRequest, opts ...grpc.CallOption) (*DescribeSmartModuleReply, error)
	UpdateSmartModule(ctx context.Context, in *UpdateSmartModuleRequest, opts ...grpc.CallOption) (*UpdateSmartModuleReply, error)
	// 其他
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckReply, error)
}

type fluvioServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFluvioServiceClient(cc grpc.ClientConnInterface) FluvioServiceClient {
	return &fluvioServiceClient{cc}
}

func (c *fluvioServiceClient) Produce(ctx context.Context, in *ProduceRequest, opts ...grpc.CallOption) (*ProduceReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProduceReply)
	err := c.cc.Invoke(ctx, FluvioService_Produce_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fluvioServiceClient) BatchProduce(ctx context.Context, in *BatchProduceRequest, opts ...grpc.CallOption) (*BatchProduceReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchProduceReply)
	err := c.cc.Invoke(ctx, FluvioService_BatchProduce_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fluvioServiceClient) Consume(ctx context.Context, in *ConsumeRequest, opts ...grpc.CallOption) (*ConsumeReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConsumeReply)
	err := c.cc.Invoke(ctx, FluvioService_Consume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fluvioServiceClient) StreamConsume(ctx context.Context, in *StreamConsumeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ConsumedMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FluvioService_ServiceDesc.Streams[0], FluvioService_StreamConsume_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamConsumeRequest, ConsumedMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FluvioService_StreamConsumeClient = grpc.ServerStreamingClient[ConsumedMessage]

func (c *fluvioServiceClient) CommitOffset(ctx context.Context, in *CommitOffsetRequest, opts ...grpc.CallOption) (*CommitOffsetReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommitOffsetReply)
	err := c.cc.Invoke(ctx, FluvioService_CommitOffset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fluvioServiceClient) CreateTopic(ctx context.Context, in *CreateTopicRequest, opts ...grpc.CallOption) (*CreateTopicReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTopicReply)
	err := c.cc.Invoke(ctx, FluvioService_CreateTopic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fluvioServiceClient) DeleteTopic(ctx context.Context, in *DeleteTopicRequest, opts ...grpc.CallOption) (*DeleteTopicReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTopicReply)
	err := c.cc.Invoke(ctx, FluvioService_DeleteTopic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fluvioServiceClient) ListTopics(ctx context.Context, in *ListTopicsRequest, opts ...grpc.CallOption) (*ListTopicsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTopicsReply)
	err := c.cc.Invoke(ctx, FluvioService_ListTopics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fluvioServiceClient) DescribeTopic(ctx context.Context, in *DescribeTopicRequest, opts ...grpc.CallOption) (*DescribeTopicReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeTopicReply)
	err := c.cc.Invoke(ctx, FluvioService_DescribeTopic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fluvioServiceClient) ListConsumerGroups(ctx context.Context, in *ListConsumerGroupsRequest, opts ...grpc.CallOption) (*ListConsumerGroupsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListConsumerGroupsReply)
	err := c.cc.Invoke(ctx, FluvioService_ListConsumerGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fluvioServiceClient) DescribeConsumerGroup(ctx context.Context, in *DescribeConsumerGroupRequest, opts ...grpc.CallOption) (*DescribeConsumerGroupReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeConsumerGroupReply)
	err := c.cc.Invoke(ctx, FluvioService_DescribeConsumerGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fluvioServiceClient) CreateSmartModule(ctx context.Context, in *CreateSmartModuleRequest, opts ...grpc.CallOption) (*CreateSmartModuleReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSmartModuleReply)
	err := c.cc.Invoke(ctx, FluvioService_CreateSmartModule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fluvioServiceClient) DeleteSmartModule(ctx context.Context, in *DeleteSmartModuleRequest, opts ...grpc.CallOption) (*DeleteSmartModuleReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSmartModuleReply)
	err := c.cc.Invoke(ctx, FluvioService_DeleteSmartModule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fluvioServiceClient) ListSmartModules(ctx context.Context, in *ListSmartModulesRequest, opts ...grpc.CallOption) (*ListSmartModulesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSmartModulesReply)
	err := c.cc.Invoke(ctx, FluvioService_ListSmartModules_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fluvioServiceClient) DescribeSmartModule(ctx context.Context, in *DescribeSmartModuleRequest, opts ...grpc.CallOption) (*DescribeSmartModuleReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeSmartModuleReply)
	err := c.cc.Invoke(ctx, FluvioService_DescribeSmartModule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fluvioServiceClient) UpdateSmartModule(ctx context.Context, in *UpdateSmartModuleRequest, opts ...grpc.CallOption) (*UpdateSmartModuleReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSmartModuleReply)
	err := c.cc.Invoke(ctx, FluvioService_UpdateSmartModule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fluvioServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckReply)
	err := c.cc.Invoke(ctx, FluvioService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FluvioServiceServer is the server API for FluvioService service.
// All implementations must embed UnimplementedFluvioServiceServer
// for forward compatibility.
//
// FluvioService 定义了模拟 Fluvio 的核心服务接口
type FluvioServiceServer interface {
	// 消息生产/消费相关
	Produce(context.Context, *ProduceRequest) (*ProduceReply, error)
	BatchProduce(context.Context, *BatchProduceRequest) (*BatchProduceReply, error)
	Consume(context.Context, *ConsumeRequest) (*ConsumeReply, error)
	StreamConsume(*StreamConsumeRequest, grpc.ServerStreamingServer[ConsumedMessage]) error
	CommitOffset(context.Context, *CommitOffsetRequest) (*CommitOffsetReply, error)
	// 主题管理相关
	CreateTopic(context.Context, *CreateTopicRequest) (*CreateTopicReply, error)
	DeleteTopic(context.Context, *DeleteTopicRequest) (*DeleteTopicReply, error)
	ListTopics(context.Context, *ListTopicsRequest) (*ListTopicsReply, error)
	DescribeTopic(context.Context, *DescribeTopicRequest) (*DescribeTopicReply, error)
	// 消费者组管理相关
	ListConsumerGroups(context.Context, *ListConsumerGroupsRequest) (*ListConsumerGroupsReply, error)
	DescribeConsumerGroup(context.Context, *DescribeConsumerGroupRequest) (*DescribeConsumerGroupReply, error)
	// SmartModule 管理相关
	CreateSmartModule(context.Context, *CreateSmartModuleRequest) (*CreateSmartModuleReply, error)
	DeleteSmartModule(context.Context, *DeleteSmartModuleRequest) (*DeleteSmartModuleReply, error)
	ListSmartModules(context.Context, *ListSmartModulesRequest) (*ListSmartModulesReply, error)
	DescribeSmartModule(context.Context, *DescribeSmartModuleRequest) (*DescribeSmartModuleReply, error)
	UpdateSmartModule(context.Context, *UpdateSmartModuleRequest) (*UpdateSmartModuleReply, error)
	// 其他
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckReply, error)
	mustEmbedUnimplementedFluvioServiceServer()
}

// UnimplementedFluvioServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFluvioServiceServer struct{}

func (UnimplementedFluvioServiceServer) Produce(context.Context, *ProduceRequest) (*ProduceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Produce not implemented")
}
func (UnimplementedFluvioServiceServer) BatchProduce(context.Context, *BatchProduceRequest) (*BatchProduceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchProduce not implemented")
}
func (UnimplementedFluvioServiceServer) Consume(context.Context, *ConsumeRequest) (*ConsumeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Consume not implemented")
}
func (UnimplementedFluvioServiceServer) StreamConsume(*StreamConsumeRequest, grpc.ServerStreamingServer[ConsumedMessage]) error {
	return status.Errorf(codes.Unimplemented, "method StreamConsume not implemented")
}
func (UnimplementedFluvioServiceServer) CommitOffset(context.Context, *CommitOffsetRequest) (*CommitOffsetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitOffset not implemented")
}
func (UnimplementedFluvioServiceServer) CreateTopic(context.Context, *CreateTopicRequest) (*CreateTopicReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTopic not implemented")
}
func (UnimplementedFluvioServiceServer) DeleteTopic(context.Context, *DeleteTopicRequest) (*DeleteTopicReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTopic not implemented")
}
func (UnimplementedFluvioServiceServer) ListTopics(context.Context, *ListTopicsRequest) (*ListTopicsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTopics not implemented")
}
func (UnimplementedFluvioServiceServer) DescribeTopic(context.Context, *DescribeTopicRequest) (*DescribeTopicReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeTopic not implemented")
}
func (UnimplementedFluvioServiceServer) ListConsumerGroups(context.Context, *ListConsumerGroupsRequest) (*ListConsumerGroupsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConsumerGroups not implemented")
}
func (UnimplementedFluvioServiceServer) DescribeConsumerGroup(context.Context, *DescribeConsumerGroupRequest) (*DescribeConsumerGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeConsumerGroup not implemented")
}
func (UnimplementedFluvioServiceServer) CreateSmartModule(context.Context, *CreateSmartModuleRequest) (*CreateSmartModuleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSmartModule not implemented")
}
func (UnimplementedFluvioServiceServer) DeleteSmartModule(context.Context, *DeleteSmartModuleRequest) (*DeleteSmartModuleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSmartModule not implemented")
}
func (UnimplementedFluvioServiceServer) ListSmartModules(context.Context, *ListSmartModulesRequest) (*ListSmartModulesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSmartModules not implemented")
}
func (UnimplementedFluvioServiceServer) DescribeSmartModule(context.Context, *DescribeSmartModuleRequest) (*DescribeSmartModuleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeSmartModule not implemented")
}
func (UnimplementedFluvioServiceServer) UpdateSmartModule(context.Context, *UpdateSmartModuleRequest) (*UpdateSmartModuleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSmartModule not implemented")
}
func (UnimplementedFluvioServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedFluvioServiceServer) mustEmbedUnimplementedFluvioServiceServer() {}
func (UnimplementedFluvioServiceServer) testEmbeddedByValue()                       {}

// UnsafeFluvioServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FluvioServiceServer will
// result in compilation errors.
type UnsafeFluvioServiceServer interface {
	mustEmbedUnimplementedFluvioServiceServer()
}

func RegisterFluvioServiceServer(s grpc.ServiceRegistrar, srv FluvioServiceServer) {
	// If the following call pancis, it indicates UnimplementedFluvioServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FluvioService_ServiceDesc, srv)
}

func _FluvioService_Produce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProduceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FluvioServiceServer).Produce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FluvioService_Produce_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FluvioServiceServer).Produce(ctx, req.(*ProduceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FluvioService_BatchProduce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchProduceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FluvioServiceServer).BatchProduce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FluvioService_BatchProduce_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FluvioServiceServer).BatchProduce(ctx, req.(*BatchProduceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FluvioService_Consume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FluvioServiceServer).Consume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FluvioService_Consume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FluvioServiceServer).Consume(ctx, req.(*ConsumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FluvioService_StreamConsume_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamConsumeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FluvioServiceServer).StreamConsume(m, &grpc.GenericServerStream[StreamConsumeRequest, ConsumedMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FluvioService_StreamConsumeServer = grpc.ServerStreamingServer[ConsumedMessage]

func _FluvioService_CommitOffset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitOffsetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FluvioServiceServer).CommitOffset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FluvioService_CommitOffset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FluvioServiceServer).CommitOffset(ctx, req.(*CommitOffsetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FluvioService_CreateTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FluvioServiceServer).CreateTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FluvioService_CreateTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FluvioServiceServer).CreateTopic(ctx, req.(*CreateTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FluvioService_DeleteTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FluvioServiceServer).DeleteTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FluvioService_DeleteTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FluvioServiceServer).DeleteTopic(ctx, req.(*DeleteTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FluvioService_ListTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTopicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FluvioServiceServer).ListTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FluvioService_ListTopics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FluvioServiceServer).ListTopics(ctx, req.(*ListTopicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FluvioService_DescribeTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FluvioServiceServer).DescribeTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FluvioService_DescribeTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FluvioServiceServer).DescribeTopic(ctx, req.(*DescribeTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FluvioService_ListConsumerGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConsumerGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FluvioServiceServer).ListConsumerGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FluvioService_ListConsumerGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FluvioServiceServer).ListConsumerGroups(ctx, req.(*ListConsumerGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FluvioService_DescribeConsumerGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeConsumerGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FluvioServiceServer).DescribeConsumerGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FluvioService_DescribeConsumerGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FluvioServiceServer).DescribeConsumerGroup(ctx, req.(*DescribeConsumerGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FluvioService_CreateSmartModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSmartModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FluvioServiceServer).CreateSmartModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FluvioService_CreateSmartModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FluvioServiceServer).CreateSmartModule(ctx, req.(*CreateSmartModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FluvioService_DeleteSmartModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSmartModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FluvioServiceServer).DeleteSmartModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FluvioService_DeleteSmartModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FluvioServiceServer).DeleteSmartModule(ctx, req.(*DeleteSmartModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FluvioService_ListSmartModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSmartModulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FluvioServiceServer).ListSmartModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FluvioService_ListSmartModules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FluvioServiceServer).ListSmartModules(ctx, req.(*ListSmartModulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FluvioService_DescribeSmartModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeSmartModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FluvioServiceServer).DescribeSmartModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FluvioService_DescribeSmartModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FluvioServiceServer).DescribeSmartModule(ctx, req.(*DescribeSmartModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FluvioService_UpdateSmartModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSmartModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FluvioServiceServer).UpdateSmartModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FluvioService_UpdateSmartModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FluvioServiceServer).UpdateSmartModule(ctx, req.(*UpdateSmartModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FluvioService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FluvioServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FluvioService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FluvioServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FluvioService_ServiceDesc is the grpc.ServiceDesc for FluvioService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FluvioService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fluvio_grpc.FluvioService",
	HandlerType: (*FluvioServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Produce",
			Handler:    _FluvioService_Produce_Handler,
		},
		{
			MethodName: "BatchProduce",
			Handler:    _FluvioService_BatchProduce_Handler,
		},
		{
			MethodName: "Consume",
			Handler:    _FluvioService_Consume_Handler,
		},
		{
			MethodName: "CommitOffset",
			Handler:    _FluvioService_CommitOffset_Handler,
		},
		{
			MethodName: "CreateTopic",
			Handler:    _FluvioService_CreateTopic_Handler,
		},
		{
			MethodName: "DeleteTopic",
			Handler:    _FluvioService_DeleteTopic_Handler,
		},
		{
			MethodName: "ListTopics",
			Handler:    _FluvioService_ListTopics_Handler,
		},
		{
			MethodName: "DescribeTopic",
			Handler:    _FluvioService_DescribeTopic_Handler,
		},
		{
			MethodName: "ListConsumerGroups",
			Handler:    _FluvioService_ListConsumerGroups_Handler,
		},
		{
			MethodName: "DescribeConsumerGroup",
			Handler:    _FluvioService_DescribeConsumerGroup_Handler,
		},
		{
			MethodName: "CreateSmartModule",
			Handler:    _FluvioService_CreateSmartModule_Handler,
		},
		{
			MethodName: "DeleteSmartModule",
			Handler:    _FluvioService_DeleteSmartModule_Handler,
		},
		{
			MethodName: "ListSmartModules",
			Handler:    _FluvioService_ListSmartModules_Handler,
		},
		{
			MethodName: "DescribeSmartModule",
			Handler:    _FluvioService_DescribeSmartModule_Handler,
		},
		{
			MethodName: "UpdateSmartModule",
			Handler:    _FluvioService_UpdateSmartModule_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _FluvioService_HealthCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamConsume",
			Handler:       _FluvioService_StreamConsume_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/fluvio_grpc.proto",
}

const (
	FluvioAdminService_DescribeCluster_FullMethodName = "/fluvio_grpc.FluvioAdminService/DescribeCluster"
	FluvioAdminService_ListBrokers_FullMethodName     = "/fluvio_grpc.FluvioAdminService/ListBrokers"
	FluvioAdminService_GetMetrics_FullMethodName      = "/fluvio_grpc.FluvioAdminService/GetMetrics"
)

// FluvioAdminServiceClient is the client API for FluvioAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 新增: FluvioAdminService 定义了管理和监控相关的接口
type FluvioAdminServiceClient interface {
	DescribeCluster(ctx context.Context, in *DescribeClusterRequest, opts ...grpc.CallOption) (*DescribeClusterReply, error)
	ListBrokers(ctx context.Context, in *ListBrokersRequest, opts ...grpc.CallOption) (*ListBrokersReply, error)
	GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*GetMetricsReply, error)
}

type fluvioAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFluvioAdminServiceClient(cc grpc.ClientConnInterface) FluvioAdminServiceClient {
	return &fluvioAdminServiceClient{cc}
}

func (c *fluvioAdminServiceClient) DescribeCluster(ctx context.Context, in *DescribeClusterRequest, opts ...grpc.CallOption) (*DescribeClusterReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeClusterReply)
	err := c.cc.Invoke(ctx, FluvioAdminService_DescribeCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fluvioAdminServiceClient) ListBrokers(ctx context.Context, in *ListBrokersRequest, opts ...grpc.CallOption) (*ListBrokersReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBrokersReply)
	err := c.cc.Invoke(ctx, FluvioAdminService_ListBrokers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fluvioAdminServiceClient) GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*GetMetricsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMetricsReply)
	err := c.cc.Invoke(ctx, FluvioAdminService_GetMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FluvioAdminServiceServer is the server API for FluvioAdminService service.
// All implementations must embed UnimplementedFluvioAdminServiceServer
// for forward compatibility.
//
// 新增: FluvioAdminService 定义了管理和监控相关的接口
type FluvioAdminServiceServer interface {
	DescribeCluster(context.Context, *DescribeClusterRequest) (*DescribeClusterReply, error)
	ListBrokers(context.Context, *ListBrokersRequest) (*ListBrokersReply, error)
	GetMetrics(context.Context, *GetMetricsRequest) (*GetMetricsReply, error)
	mustEmbedUnimplementedFluvioAdminServiceServer()
}

// UnimplementedFluvioAdminServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFluvioAdminServiceServer struct{}

func (UnimplementedFluvioAdminServiceServer) DescribeCluster(context.Context, *DescribeClusterRequest) (*DescribeClusterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCluster not implemented")
}
func (UnimplementedFluvioAdminServiceServer) ListBrokers(context.Context, *ListBrokersRequest) (*ListBrokersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBrokers not implemented")
}
func (UnimplementedFluvioAdminServiceServer) GetMetrics(context.Context, *GetMetricsRequest) (*GetMetricsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (UnimplementedFluvioAdminServiceServer) mustEmbedUnimplementedFluvioAdminServiceServer() {}
func (UnimplementedFluvioAdminServiceServer) testEmbeddedByValue()                            {}

// UnsafeFluvioAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FluvioAdminServiceServer will
// result in compilation errors.
type UnsafeFluvioAdminServiceServer interface {
	mustEmbedUnimplementedFluvioAdminServiceServer()
}

func RegisterFluvioAdminServiceServer(s grpc.ServiceRegistrar, srv FluvioAdminServiceServer) {
	// If the following call pancis, it indicates UnimplementedFluvioAdminServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FluvioAdminService_ServiceDesc, srv)
}

func _FluvioAdminService_DescribeCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FluvioAdminServiceServer).DescribeCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FluvioAdminService_DescribeCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FluvioAdminServiceServer).DescribeCluster(ctx, req.(*DescribeClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FluvioAdminService_ListBrokers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBrokersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FluvioAdminServiceServer).ListBrokers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FluvioAdminService_ListBrokers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FluvioAdminServiceServer).ListBrokers(ctx, req.(*ListBrokersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FluvioAdminService_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FluvioAdminServiceServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FluvioAdminService_GetMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FluvioAdminServiceServer).GetMetrics(ctx, req.(*GetMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FluvioAdminService_ServiceDesc is the grpc.ServiceDesc for FluvioAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FluvioAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fluvio_grpc.FluvioAdminService",
	HandlerType: (*FluvioAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DescribeCluster",
			Handler:    _FluvioAdminService_DescribeCluster_Handler,
		},
		{
			MethodName: "ListBrokers",
			Handler:    _FluvioAdminService_ListBrokers_Handler,
		},
		{
			MethodName: "GetMetrics",
			Handler:    _FluvioAdminService_GetMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/fluvio_grpc.proto",
}
