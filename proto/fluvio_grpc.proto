syntax = "proto3"; // 指定使用 proto3 语法

package fluvio_grpc; // 定义包名

import "google/protobuf/timestamp.proto"; // 导入 Timestamp 类型

option go_package = "proto/fluvio_service"; // 指定生成的 Go 代码的包路径

// FluvioService 定义了 Fluvio 的核心服务接口
service FluvioService {
  // 消息生产/消费相关
  rpc Produce(ProduceRequest) returns (ProduceReply);
  rpc BatchProduce(BatchProduceRequest) returns (BatchProduceReply);
  rpc Consume(ConsumeRequest) returns (ConsumeReply);
  rpc StreamConsume(StreamConsumeRequest) returns (stream ConsumedMessage);
  rpc CommitOffset(CommitOffsetRequest) returns (CommitOffsetReply); // 提交消费位点

  // 主题管理相关
  rpc CreateTopic(CreateTopicRequest) returns (CreateTopicReply);
  rpc DeleteTopic(DeleteTopicRequest) returns (DeleteTopicReply);
  rpc ListTopics(ListTopicsRequest) returns (ListTopicsReply);
  rpc DescribeTopic(DescribeTopicRequest) returns (DescribeTopicReply); // 获取主题详情

  // 消费者组管理相关
  rpc ListConsumerGroups(ListConsumerGroupsRequest) returns (ListConsumerGroupsReply); // 列出消费组
  rpc DescribeConsumerGroup(DescribeConsumerGroupRequest) returns (DescribeConsumerGroupReply); // 获取消费组详情

  // SmartModule 管理相关
  rpc CreateSmartModule(CreateSmartModuleRequest) returns (CreateSmartModuleReply); // 创建 SmartModule
  rpc DeleteSmartModule(DeleteSmartModuleRequest) returns (DeleteSmartModuleReply); // 删除 SmartModule
  rpc ListSmartModules(ListSmartModulesRequest) returns (ListSmartModulesReply);    // 列出 SmartModule
  rpc DescribeSmartModule(DescribeSmartModuleRequest) returns (DescribeSmartModuleReply); // 新增: 获取 SmartModule 详情
  rpc UpdateSmartModule(UpdateSmartModuleRequest) returns (UpdateSmartModuleReply); // 新增: 更新 SmartModule

  // 高级功能
  rpc FilteredConsume(FilteredConsumeRequest) returns (FilteredConsumeReply); // 过滤消费
  rpc BulkDelete(BulkDeleteRequest) returns (BulkDeleteReply); // 批量删除
  rpc GetTopicStats(GetTopicStatsRequest) returns (GetTopicStatsReply); // 获取主题统计信息
  rpc GetStorageStatus(GetStorageStatusRequest) returns (GetStorageStatusReply); // 获取存储状态
  rpc MigrateStorage(MigrateStorageRequest) returns (MigrateStorageReply); // 存储迁移
  rpc GetStorageMetrics(GetStorageMetricsRequest) returns (GetStorageMetricsReply); // 获取存储指标

  // 其他
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckReply);
}

// 新增: FluvioAdminService 定义了管理和监控相关的接口
service FluvioAdminService {
  rpc DescribeCluster(DescribeClusterRequest) returns (DescribeClusterReply); // 获取集群状态
  rpc ListBrokers(ListBrokersRequest) returns (ListBrokersReply);       // 列出 Broker 信息
  rpc GetMetrics(GetMetricsRequest) returns (GetMetricsReply);         // 获取指标
}

// --- 消息生产/消费相关 --- //

// ProduceRequest 生产单条消息的请求结构
message ProduceRequest {
  string topic = 1; // 目标主题名称
  string message = 2; // 消息内容
  string key = 3; // 消息的 Key，用于分区或去重等场景
  map<string, string> headers = 4; // 消息的自定义头信息，用于传递额外元数据
  google.protobuf.Timestamp timestamp = 5; // 使用标准 Timestamp 类型
  string message_id = 6; // 可选的消息唯一 ID (如 UUID)，为空则服务端生成
}

// ProduceReply 生产单条消息的响应结构
message ProduceReply {
  bool success = 1; // 操作是否成功
  string error = 2; // 如果失败，包含错误信息
  string message_id = 3; // 服务端确认（或生成）的消息 ID
}

// BatchProduceRequest 批量生产消息的请求结构
message BatchProduceRequest {
  string topic = 1; // 目标主题名称
  repeated ProduceRequest messages = 2; // 需要批量生产的消息列表
}

// BatchProduceReply 批量生产消息的响应结构
message BatchProduceReply {
  repeated bool success = 1; // 每个消息是否成功生产的标志列表
  repeated string error = 2; // 每个消息对应的错误信息列表（如果失败）
  // 可以考虑返回 message_ids 列表
}

// ConsumeRequest 消费消息的请求结构
message ConsumeRequest {
  string topic = 1; // 目标主题名称
  int32 max_messages = 2; // 本次请求最多消费的消息数量
  int64 offset = 3; // 消费的起始偏移量
  string group = 4; // 消费组名称
  int32 partition = 5; // 新增: 可选, 目标特定分区 ID, 默认消费所有分区
}

// ConsumedMessage 包含元数据的已消费消息结构
message ConsumedMessage {
  string message = 1; // 消息内容
  int64 offset = 2; // 消息在主题分区中的偏移量
  string key = 3; // 消息的 Key
  map<string, string> headers = 4; // 消息的头信息
  int64 timestamp = 5; // 消息的时间戳 (保持 int64)
  string message_id = 6; // 消息的唯一 ID
  int32 partition = 7; // 新增: 消息所属的分区 ID
}

// ConsumeReply 消费消息的响应结构
message ConsumeReply {
  repeated ConsumedMessage messages = 1; // 获取到的消息列表（包含元数据）
  string error = 2; // 如果消费过程出错，包含错误信息
  int64 next_offset = 3; // 建议下次消费的起始偏移量（如果消费整个主题）
}

// StreamConsumeRequest 流式消费请求结构
message StreamConsumeRequest {
  string topic = 1; // 要流式消费的主题名称
  int64 offset = 2; // 消费的起始偏移量
  string group = 3; // 消费组名称
  int32 partition = 4; // 新增: 可选, 目标特定分区 ID, 默认消费所有分区
  int32 max_batch_size = 5; // 新增: 可选, 控制每次流式响应的最大消息数
  int32 max_wait_ms = 6;    // 新增: 可选, 控制服务器等待批次满足的最长时间(毫秒)
}

// CommitOffsetRequest 提交消费位点请求
message CommitOffsetRequest {
  string topic = 1; // 主题名称
  string group = 2; // 消费组名称
  int64 offset = 3; // 要提交的偏移量
  int32 partition = 4; // 新增: 可选, 提交特定分区的位点, 默认作用于该 group 在 topic 上的所有分区(如果适用)
}

// CommitOffsetReply 提交消费位点响应
message CommitOffsetReply {
  bool success = 1; // 操作是否成功
  string error = 2; // 如果失败，包含错误信息
}

// --- 主题管理相关 --- //

// CreateTopicRequest 创建主题的请求结构
message CreateTopicRequest {
  string topic = 1; // 要创建的主题名称
  int32 partitions = 2; // 主题的分区数量
  int32 replication_factor = 3; // 副本因子
  int64 retention_ms = 4; // 消息保留时长（毫秒），0 表示不限
  map<string, string> config = 5; // 其他主题配置项
}

// CreateTopicReply 创建主题的响应结构
message CreateTopicReply {
  bool success = 1; // 操作是否成功
  string error = 2; // 如果失败，包含错误信息
}

// DeleteTopicRequest 删除主题的请求结构
message DeleteTopicRequest {
  string topic = 1; // 要删除的主题名称
}

// DeleteTopicReply 删除主题的响应结构
message DeleteTopicReply {
  bool success = 1; // 操作是否成功
  string error = 2; // 如果失败，包含错误信息
}

// ListTopicsRequest 获取主题列表的请求结构
message ListTopicsRequest {}

// ListTopicsReply 获取主题列表的响应结构
message ListTopicsReply {
  repeated string topics = 1; // 主题名称列表
}

// DescribeTopicRequest 获取主题详情的请求结构
message DescribeTopicRequest {
  string topic = 1; // 要查询的主题名称
}

// 新增: PartitionInfo 分区信息
message PartitionInfo {
  int32 partition_id = 1; // 分区 ID
  int64 leader_id = 2; // Leader 副本所在的 Broker ID (或其他标识符)
  repeated int64 replica_ids = 3; // 所有副本所在的 Broker ID 列表
  repeated int64 isr_ids = 4; // In-Sync Replicas (ISR) 列表
  int64 high_watermark = 5; // 最高水位线
  int64 log_start_offset = 6; // 最早可用偏移量
}

// DescribeTopicReply 获取主题详情的响应结构
message DescribeTopicReply {
  string topic = 1; // 主题名称
  int64 retention_ms = 2; // 消息保留时长
  map<string, string> config = 3; // 其他主题配置
  string error = 4; // 如果查询失败，包含错误信息
  repeated PartitionInfo partitions = 5; // 新增: 主题的分区详细信息
}

// --- 消费者组管理相关 (简化) --- //

// ListConsumerGroupsRequest 列出消费组请求
message ListConsumerGroupsRequest {}

// ConsumerGroupInfo 消费组简要信息 (简化)
message ConsumerGroupInfo {
  string group_id = 1; // 消费组 ID
}

// ListConsumerGroupsReply 列出消费组响应 (简化)
message ListConsumerGroupsReply {
  repeated ConsumerGroupInfo groups = 1; // 消费组列表
  string error = 2; // 如果查询失败，包含错误信息
}

// DescribeConsumerGroupRequest 获取消费组详情请求
message DescribeConsumerGroupRequest {
  string group_id = 1; // 要查询的消费组 ID
}

// ConsumerGroupOffsetInfo 消费组在特定分区的位点信息
message ConsumerGroupOffsetInfo {
  string topic = 1; // 主题名称
  int32 partition = 2; // 新增: 分区 ID
  int64 committed_offset = 3; // 已提交的位点
}

// DescribeConsumerGroupReply 获取消费组详情响应 (简化, 但包含分区位点)
message DescribeConsumerGroupReply {
  string group_id = 1; // 消费组 ID
  repeated ConsumerGroupOffsetInfo offsets = 2; // 各分区消费位点信息
  string error = 3; // 如果查询失败，包含错误信息
}

// --- SmartModule 管理相关 --- //

// SmartModuleInput 类型
enum SmartModuleInput {
  SMART_MODULE_INPUT_UNKNOWN = 0;
  SMART_MODULE_INPUT_STREAM = 1; // 用于流处理
  SMART_MODULE_INPUT_TABLE = 2; // 用于表处理 (如果支持)
}

// SmartModuleOutput 类型
enum SmartModuleOutput {
  SMART_MODULE_OUTPUT_UNKNOWN = 0;
  SMART_MODULE_OUTPUT_STREAM = 1;
  SMART_MODULE_OUTPUT_TABLE = 2;
}

// SmartModuleParameter 参数定义
message SmartModuleParameter {
  string name = 1; // 参数名
  string description = 2; // 参数描述
  bool optional = 3; // 是否可选
}

// SmartModuleSpec SmartModule 规格定义
message SmartModuleSpec {
  string name = 1; // SmartModule 名称 (唯一)
  SmartModuleInput input_kind = 2; // 输入类型
  SmartModuleOutput output_kind = 3; // 输出类型
  repeated SmartModuleParameter parameters = 4; // 参数列表
  string description = 5; // 新增: SmartModule 描述
  string version = 6;     // 新增: SmartModule 版本
}

// CreateSmartModuleRequest 创建 SmartModule 请求
message CreateSmartModuleRequest {
  SmartModuleSpec spec = 1; // SmartModule 规格
  bytes wasm_code = 2; // Wasm 字节码
}

// CreateSmartModuleReply 创建 SmartModule 响应
message CreateSmartModuleReply {
  bool success = 1;
  string error = 2;
}

// DeleteSmartModuleRequest 删除 SmartModule 请求
message DeleteSmartModuleRequest {
  string name = 1; // 要删除的 SmartModule 名称
}

// DeleteSmartModuleReply 删除 SmartModule 响应
message DeleteSmartModuleReply {
  bool success = 1;
  string error = 2;
}

// ListSmartModulesRequest 列出 SmartModule 请求
message ListSmartModulesRequest {}

// ListSmartModulesReply 列出 SmartModule 响应
message ListSmartModulesReply {
  repeated SmartModuleSpec modules = 1; // SmartModule 列表
  string error = 2;
}

// 新增: DescribeSmartModuleRequest 获取 SmartModule 详情请求
message DescribeSmartModuleRequest {
    string name = 1; // 要查询的 SmartModule 名称
}

// 新增: DescribeSmartModuleReply 获取 SmartModule 详情响应
message DescribeSmartModuleReply {
    SmartModuleSpec spec = 1; // SmartModule 规格
    string error = 2; // 如果查询失败
}

// 新增: UpdateSmartModuleRequest 更新 SmartModule 请求
message UpdateSmartModuleRequest {
    string name = 1; // 要更新的 SmartModule 名称
    SmartModuleSpec spec = 2; // 可选: 更新规格 (部分或全部)
    bytes wasm_code = 3; // 可选: 更新 Wasm 代码
}

// 新增: UpdateSmartModuleReply 更新 SmartModule 响应
message UpdateSmartModuleReply {
    bool success = 1;
    string error = 2;
}

// --- 管理和监控相关 (FluvioAdminService) --- //

// DescribeClusterRequest 获取集群状态请求
message DescribeClusterRequest {}

// DescribeClusterReply 获取集群状态响应
message DescribeClusterReply {
  string status = 1; // 例如: "Healthy", "Degraded"
  int32 controller_id = 2; // 控制器节点 ID
  string error = 3;
}

// ListBrokersRequest 列出 Broker 请求
message ListBrokersRequest {}

// BrokerInfo Broker 节点信息
message BrokerInfo {
  int64 id = 1;
  string addr = 2; // Broker 地址
  string status = 3; // 例如: "Online", "Offline"
}

// ListBrokersReply 列出 Broker 响应
message ListBrokersReply {
  repeated BrokerInfo brokers = 1;
  string error = 2;
}

// GetMetricsRequest 获取指标请求
message GetMetricsRequest {
  repeated string metric_names = 1; // 指定要获取的指标名称 (可选)
  map<string, string> labels = 2; // 指定过滤标签 (可选)
}

// Metric 指标信息
message Metric {
  string name = 1;
  map<string, string> labels = 2;
  double value = 3;
  google.protobuf.Timestamp timestamp = 4;
}

// GetMetricsReply 获取指标响应
message GetMetricsReply {
  repeated Metric metrics = 1;
  string error = 2;
}

// --- 其他 --- //

// HealthCheckRequest 健康检查请求结构
message HealthCheckRequest {
  bool detailed = 1; // 是否返回详细的健康检查信息，默认false
}

// 健康状态枚举
enum HealthStatus {
  UNKNOWN = 0;
  HEALTHY = 1;
  DEGRADED = 2; // 部分功能不可用但核心功能正常
  UNHEALTHY = 3;
}

// 组件健康状态
message ComponentHealth {
  string name = 1; // 组件名称
  HealthStatus status = 2; // 组件状态
  string message = 3; // 状态描述
  int64 response_time_ms = 4; // 响应时间（毫秒）
}

// HealthCheckReply 健康检查响应结构
message HealthCheckReply {
  HealthStatus status = 1; // 健康状态
  string message = 2; // 状态描述消息
  google.protobuf.Timestamp timestamp = 3; // 检查时间戳
  repeated ComponentHealth components = 4; // 各组件健康状态
}

// --- 高级功能 --- //

// 消息过滤器类型
enum FilterType {
  FILTER_TYPE_UNKNOWN = 0;
  FILTER_TYPE_KEY = 1; // 按消息键过滤
  FILTER_TYPE_HEADER = 2; // 按消息头过滤
  FILTER_TYPE_CONTENT = 3; // 按消息内容过滤
  FILTER_TYPE_TIMESTAMP = 4; // 按时间戳过滤
}

// 过滤条件
message FilterCondition {
  FilterType type = 1; // 过滤类型
  string field = 2; // 过滤字段（对于header和content过滤）
  string operator = 3; // 操作符：eq, ne, contains, starts_with, ends_with, gt, lt, gte, lte
  string value = 4; // 过滤值
}

// 过滤消费请求
message FilteredConsumeRequest {
  string topic = 1; // 目标主题名称
  int32 max_messages = 2; // 本次请求最多消费的消息数量
  int64 offset = 3; // 消费的起始偏移量
  string group = 4; // 消费组名称
  int32 partition = 5; // 目标特定分区 ID
  repeated FilterCondition filters = 6; // 过滤条件列表
  bool and_logic = 7; // true为AND逻辑，false为OR逻辑，默认true
}

// 过滤消费响应
message FilteredConsumeReply {
  repeated ConsumedMessage messages = 1; // 过滤后的消息列表
  string error = 2; // 如果消费过程出错，包含错误信息
  int64 next_offset = 3; // 建议下次消费的起始偏移量
  int32 total_scanned = 4; // 总共扫描的消息数量
  int32 filtered_count = 5; // 过滤后的消息数量
}

// 批量删除请求
message BulkDeleteRequest {
  repeated string topics = 1; // 要删除的主题列表
  repeated string consumer_groups = 2; // 要删除的消费者组列表
  repeated string smart_modules = 3; // 要删除的SmartModule列表
  bool force = 4; // 是否强制删除（忽略依赖检查）
}

// 批量删除结果
message BulkDeleteResult {
  string name = 1; // 资源名称
  string type = 2; // 资源类型：topic, consumer_group, smart_module
  bool success = 3; // 是否删除成功
  string error = 4; // 如果失败，包含错误信息
}

// 批量删除响应
message BulkDeleteReply {
  repeated BulkDeleteResult results = 1; // 删除结果列表
  int32 total_requested = 2; // 总共请求删除的资源数量
  int32 successful_deletes = 3; // 成功删除的资源数量
  int32 failed_deletes = 4; // 删除失败的资源数量
}

// 获取主题统计信息请求
message GetTopicStatsRequest {
  string topic = 1; // 主题名称，为空则获取所有主题统计
  bool include_partitions = 2; // 是否包含分区级别的统计信息
}

// 分区统计信息
message PartitionStats {
  int32 partition_id = 1; // 分区ID
  int64 message_count = 2; // 消息总数
  int64 total_size_bytes = 3; // 总大小（字节）
  int64 earliest_offset = 4; // 最早偏移量
  int64 latest_offset = 5; // 最新偏移量
  google.protobuf.Timestamp last_updated = 6; // 最后更新时间
}

// 主题统计信息
message TopicStats {
  string topic = 1; // 主题名称
  int32 partition_count = 2; // 分区数量
  int32 replication_factor = 3; // 副本因子
  int64 total_message_count = 4; // 总消息数量
  int64 total_size_bytes = 5; // 总大小（字节）
  repeated PartitionStats partitions = 6; // 分区统计信息（如果请求包含）
  google.protobuf.Timestamp created_at = 7; // 创建时间
  google.protobuf.Timestamp last_updated = 8; // 最后更新时间
}

// 获取主题统计信息响应
message GetTopicStatsReply {
  repeated TopicStats topics = 1; // 主题统计信息列表
  string error = 2; // 如果查询失败，包含错误信息
  google.protobuf.Timestamp collected_at = 3; // 统计信息收集时间
}

// 获取存储状态请求
message GetStorageStatusRequest {
  bool include_details = 1; // 是否包含详细信息
}

// 存储连接统计信息
message StorageConnectionStats {
  uint32 current_connections = 1; // 当前连接数
  uint32 available_connections = 2; // 可用连接数
  uint32 total_created_connections = 3; // 总创建连接数
}

// 存储数据库信息
message StorageDatabaseInfo {
  string name = 1; // 数据库名称
  uint32 collections = 2; // 集合数量
  uint64 data_size = 3; // 数据大小（字节）
  uint64 storage_size = 4; // 存储大小（字节）
  uint32 indexes = 5; // 索引数量
  uint64 index_size = 6; // 索引大小（字节）
}

// 存储统计信息
message StorageStats {
  string storage_type = 1; // 存储类型：memory 或 mongodb
  uint64 consumer_groups = 2; // 消费者组数量
  uint64 consumer_offsets = 3; // 消费者偏移量数量
  uint64 smart_modules = 4; // SmartModule数量
  string connection_status = 5; // 连接状态
  StorageConnectionStats connection_stats = 6; // 连接统计（可选）
  StorageDatabaseInfo database_info = 7; // 数据库信息（可选）
}

// 获取存储状态响应
message GetStorageStatusReply {
  bool persistence_enabled = 1; // 是否启用持久化
  StorageStats storage_stats = 2; // 存储统计信息
  string error = 3; // 如果查询失败，包含错误信息
  google.protobuf.Timestamp checked_at = 4; // 检查时间
}

// 存储迁移请求
message MigrateStorageRequest {
  string source_type = 1; // 源存储类型：memory 或 mongodb
  string target_type = 2; // 目标存储类型：memory 或 mongodb
  bool verify_migration = 3; // 是否验证迁移结果
  bool force_migration = 4; // 是否强制迁移（覆盖目标数据）
}

// 迁移统计信息
message MigrationStatsProto {
  uint64 consumer_groups_migrated = 1; // 迁移的消费者组数量
  uint64 consumer_offsets_migrated = 2; // 迁移的消费者偏移量数量
  uint64 smart_modules_migrated = 3; // 迁移的SmartModule数量
  repeated string errors = 4; // 迁移过程中的错误
  uint64 total_migrated = 5; // 总迁移项目数
}

// 存储迁移响应
message MigrateStorageReply {
  bool success = 1; // 迁移是否成功
  MigrationStatsProto migration_stats = 2; // 迁移统计信息
  bool verification_passed = 3; // 验证是否通过（如果启用验证）
  string error = 4; // 如果迁移失败，包含错误信息
  google.protobuf.Timestamp completed_at = 5; // 迁移完成时间
}

// 获取存储指标请求
message GetStorageMetricsRequest {
  bool include_history = 1; // 是否包含历史指标
  uint32 history_limit = 2; // 历史记录限制数量
}

// 存储性能指标
message StorageMetricsProto {
  string storage_type = 1; // 存储类型
  uint64 response_time_ms = 2; // 响应时间（毫秒）
  double operations_per_second = 3; // 每秒操作数
  double error_rate = 4; // 错误率
  double connection_pool_usage = 5; // 连接池使用率（百分比）
  uint64 memory_usage_mb = 6; // 内存使用量（MB）
  uint64 disk_usage_mb = 7; // 磁盘使用量（MB）
  google.protobuf.Timestamp last_updated = 8; // 最后更新时间
}

// 存储健康检查结果
message StorageHealthCheckResult {
  string status = 1; // 健康状态：healthy, warning, critical, unknown
  uint64 response_time_ms = 2; // 响应时间（毫秒）
  string error_message = 3; // 错误信息（如果有）
  google.protobuf.Timestamp checked_at = 4; // 检查时间
}

// 获取存储指标响应
message GetStorageMetricsReply {
  StorageMetricsProto current_metrics = 1; // 当前指标
  repeated StorageMetricsProto metrics_history = 2; // 历史指标
  StorageHealthCheckResult health_status = 3; // 健康状态
  repeated string alerts = 4; // 告警信息
  string error = 5; // 如果查询失败，包含错误信息
  google.protobuf.Timestamp collected_at = 6; // 收集时间
}